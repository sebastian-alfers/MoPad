{ config: 
   { httpServer: 
      { connections: 1,
        allowHalfOpen: true,
        _handle: [Object],
        _events: [Object],
        httpAllowHalfOpen: false },
     maxReceivedFrameSize: 65536,
     maxReceivedMessageSize: 1048576,
     fragmentOutgoingMessages: true,
     fragmentationThreshold: 16384,
     keepalive: true,
     keepaliveInterval: 20000,
     dropConnectionOnKeepaliveTimeout: true,
     keepaliveGracePeriod: 10000,
     assembleFragments: true,
     autoAcceptConnections: false,
     disableNagleAlgorithm: true,
     closeTimeout: 5000 },
  socket: 
   { _handle: 
      { writeQueueSize: 0,
        socket: [Circular],
        onread: [Function: onread] },
     _pendingWriteReqs: 1,
     _flags: 0,
     _connectQueueSize: 0,
     destroyed: false,
     bytesRead: 217,
     bytesWritten: 129,
     allowHalfOpen: true,
     writable: true,
     readable: true,
     server: 
      { connections: 1,
        allowHalfOpen: true,
        _handle: [Object],
        _events: [Object],
        httpAllowHalfOpen: false },
     ondrain: [Function],
     _idleTimeout: 120000,
     _idleNext: 
      { _idleNext: [Circular],
        _idlePrev: [Circular],
        ontimeout: [Function] },
     _idlePrev: 
      { _idleNext: [Circular],
        _idlePrev: [Circular],
        ontimeout: [Function] },
     _idleStart: Tue, 13 Nov 2012 13:13:00 GMT,
     _events: 
      { timeout: [Function],
        error: [Function],
        close: [Object],
        data: [Function],
        end: [Function],
        drain: [Function] },
     ondata: null,
     onend: null,
     _peername: { port: 50204, family: 2, address: '127.0.0.1' } },
  protocol: null,
  extensions: [],
  remoteAddress: '127.0.0.1',
  closeReasonCode: -1,
  closeDescription: null,
  maskOutgoingPackets: false,
  maskBytes: <Buffer 30 30 03 7f>,
  frameHeader: <Buffer 2d 2c 03 7f 2d 14 03 7f 69 30>,
  bufferList: 
   { encoding: undefined,
     construct: 
      { [Function: Buffer]
        poolSize: 8192,
        isBuffer: [Function: isBuffer],
        byteLength: [Function],
        _charsWritten: 129 },
     length: [Getter],
     write: [Function],
     end: [Function],
     push: [Function],
     forEach: [Function],
     join: [Function],
     joinInto: [Function],
     advance: [Function],
     take: [Function],
     toString: [Function] },
  currentFrame: 
   { maskBytes: <Buffer 30 30 03 7f>,
     frameHeader: <Buffer 2d 2c 03 7f 2d 14 03 7f 69 30>,
     config: 
      { httpServer: [Object],
        maxReceivedFrameSize: 65536,
        maxReceivedMessageSize: 1048576,
        fragmentOutgoingMessages: true,
        fragmentationThreshold: 16384,
        keepalive: true,
        keepaliveInterval: 20000,
        dropConnectionOnKeepaliveTimeout: true,
        keepaliveGracePeriod: 10000,
        assembleFragments: true,
        autoAcceptConnections: false,
        disableNagleAlgorithm: true,
        closeTimeout: 5000 },
     maxReceivedFrameSize: 65536,
     protocolError: false,
     frameTooLarge: false,
     invalidCloseFrameLength: false,
     parseState: 1,
     closeStatus: -1 },
  fragmentationSize: 0,
  frameQueue: [],
  connected: true,
  state: 'open',
  waitingForCloseResponse: false,
  closeTimeout: 5000,
  assembleFragments: true,
  maxReceivedMessageSize: 1048576,
  outgoingFrameQueue: [],
  outputPaused: false,
  outgoingFrameQueueHandler: [Function],
  bytesWaitingToFlush: 0,
  _closeTimerHandler: [Function],
  _keepaliveTimerHandler: [Function],
  _keepaliveTimeoutID: 
   { _idleTimeout: 20000,
     _idlePrev: 
      { _idleNext: [Circular],
        _idlePrev: [Circular],
        ontimeout: [Function] },
     _idleNext: 
      { _idleNext: [Circular],
        _idlePrev: [Circular],
        ontimeout: [Function] },
     _onTimeout: [Function],
     _idleStart: Tue, 13 Nov 2012 13:13:00 GMT },
  _gracePeriodTimerHandler: [Function],
  webSocketVersion: 13,
  websocketVersion: 13,
  _events: { close: { [Function: g] listener: [Function] } } }
  